#!/bin/bash
set -e
set -o pipefail

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

composeDirectoryList()
{
    cat $1/.dysnomia-fileset | while read i
    do
        local action=$(echo "$i" | cut -f 1 -d ' ' -)
        local path=$(echo "$i" | cut -f 2- -d ' ' -)

        case "$action" in
            symlink)
                # Do nothing
                ;;
            target)
                # Do nothing
                ;;
            mkdir)
                echo "$path"
                ;;
            *)
                echo "Unknown action: $action"
                ;;
        esac
    done
}

removeDirectories()
{
    composeDirectoryList "$1" | while read i
    do
        rm -rf "$i"
        local baseDir="$(dirname "$i")"

        if [ "$baseDir" != "." ] && [ -d "$baseDir" ]
        then
            rmdir -p --ignore-fail-on-non-empty "$baseDir"
        fi
    done
}

if [ "$targetDir" = "" ]
then
    targetDir=$(cat $2/.dysnomia-targetdir)
fi

if [ "$filesetOwner" = "" ]
then
    if [ -f "$2/.dysnomia-filesetowner" ]
    then
        filesetOwner="$(cat $2/.dysnomia-filesetowner)"
    else
        filesetOwner="$(whoami):$(id -gn)"
    fi
fi

case "$1" in
    activate)
        mkdir -p $targetDir
        cd $targetDir

        cat $2/.dysnomia-fileset | while read i
        do
            action=$(echo "$i" | cut -f 1 -d ' ' -)
            path=$(echo "$i" | cut -f 2- -d ' ' -)

            case "$action" in
                symlink)
                    symlink="$path"
                    ;;
                target)
                    mkdir -p "$path"
                    ln -sfn "$symlink" "$path"
                    ;;
                mkdir)
                    mkdir -p "$path"
                    chown "$filesetOwner" "$path"
                    ;;
                *)
                    echo "Unknown action: $action"
                    exit 1
                    ;;
            esac
        done

        markComponentAsActive
        ;;

    deactivate)
        cd $targetDir

        cat $2/.dysnomia-fileset | while read i
        do
            action=$(echo "$i" | cut -f 1 -d ' ' -)
            path=$(echo "$i" | cut -f 2- -d ' ' -)

            case "$action" in
                symlink)
                    symlink="$path"
                    ;;
                target)
                    symlinkTarget="$path/$(basename "$symlink")"
                    rm -f "$symlinkTarget"
                    baseDir="$(dirname "$symlinkTarget")"

                    if [ "$baseDir" != "." ] && [ -d "$baseDir" ]
                    then
                        rmdir --ignore-fail-on-non-empty -p "$baseDir"
                    fi
                    ;;
                mkdir)
                    # Ignore
                    ;;
                *)
                    echo "Unknown action: $action"
                    exit 1
                    ;;
            esac
        done
        markComponentAsGarbage
        ;;

    snapshot)
        cd $targetDir

        snapshotsPath=$(composeSnapshotsPath)
        snapshotFile=$(mktemp state.XXXXXXXXX)

        composeDirectoryList "$2" | xargs tar cfvJ $snapshotFile

        hash=$(cat $snapshotFile | sha256sum)
        hash=${hash:0:64}

        if [ -d $snapshotsPath/$hash ]
        then
            rm $snapshotFile
        else
            mkdir -p $snapshotsPath/$hash
            mv $snapshotFile $snapshotsPath/$hash/state.tar.xz
        fi

        createGenerationSymlink $hash
        ;;

    restore)
        cd $targetDir

        lastSnapshot=$(determineLastSnapshot)

        if [ "$lastSnapshot" != "" ]
        then
            removeDirectories "$2"
            tar xfv $lastSnapshot/state.tar.xz
            composeDirectoryList "$2" | xargs chown -R "$filesetOwner"
        fi
        ;;

    collect-garbage)
        cd $targetDir

        if componentMarkedAsGarbage
        then
            removeDirectories "$2"
            unmarkComponentAsGarbage
        fi
        ;;
esac
