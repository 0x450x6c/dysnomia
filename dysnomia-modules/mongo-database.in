#!/bin/bash
set -e
set -o pipefail

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

determineComponentName $2
checkStateDir
determineTypeIdentifier $0
composeSnapshotsPath
composeGarbagePath
composeGenerationsPath

case "$1" in
    activate)
        # Nothing needs to be done to create a mongo database. It gets created
        # automatically once an object is saved.
        
        if [ -d $2/mongo-databases ]
        then
            ( echo "use $componentName;"
              cat $2/mongo-databases/*
            ) | @mongo@
        fi
        
        unmarkStateAsGarbage
        ;;
        
    deactivate)
        markStateAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        cd $tmpdir
        
        @mongodump@ -d $componentName -o .
        hash=$((for i in $componentName/*; do echo $i; cat $i; done) | sha256sum)
        hash=${hash:0:64}
        
        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv $componentName $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $snapshotsPath/$hash
        ;;
    restore)
        determineLastSnapshot
        
        if [ "$lastSnapshot" != "" ]
        then
            ( echo "use $componentName;"
              echo "db.dropDatabase();"
            ) | @mongo@
            @mongorestore@ -d $componentName $snapshotsPath/$lastSnapshot/$componentName
        fi
        ;;
    collect-garbage)
        if [ -f $garbagePath ]
        then
            ( echo "use $componentName;"
              echo "db.dropDatabase();"
            ) | @mongo@
            
            unmarkStateAsGarbage
        fi
        ;;
esac
