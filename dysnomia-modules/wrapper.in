#!/bin/bash
set -e
set -o pipefail

# Propagates the deployment operations to the wrapper script (bin/wrapper) that
# has been bundled with the mutable component to deploy,
#
# Files:
# etc/wrapper_config: Configuration file bundled with the component that
#     configures specific container settings
# etc/systemd-config: Configuration file bundled with the component that
#     augments the generated systemd configuration with additional settings
# etc/socket: Configuration file bundled with the component that defines a
#     socket unit file that can be used to activate the service on-demand
#
# Component properties (environment variables):
# container_group: Name of the group to create. If empty, no group will be created.
# container_gid: GID of the group to create. If empty, an aribitrary one will be chosen.
# container_username: Name of the user to create. If empty, no user will be created.
# container_uid: UID of the user to create. If empty, an aribitrary one will be chosen.
# container_homeDir: Path to the home directory of the user
# container_createHomeDir: When set to 1 the home directory will be created if it does not exists
# container_shell: Path to the shell of the user

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

serviceName=$(basename $2)

# Open container configuration file if it exists
if [ -f "$2/etc/wrapper_config" ]
then
    source $2/etc/wrapper_config
fi

case "$1" in
    activate)
        createUnprivilegedUserAndGroup
        
        if [ "@job_template@" = "systemd" ]
        then
            mkdir -p @systemd_rundir@/system
            
            # Systemd activation
            sed -e "s|@name@|disnix-$serviceName|" \
                -e "s|@description@|$serviceName|" \
                -e "s|@wrapper@|$(echo $2/bin/wrapper)|" \
                -e "s|@""systemd_path@|@systemd_path@|" \
                @datadir@/@PACKAGE@/wrapper.template.systemd > @systemd_rundir@/system/disnix-$serviceName.service
            
            activateSystemdService @systemd_rundir@/system/disnix-$serviceName.service $2
        elif [ "@job_template@" = "init.d" ]
        then
            runProcess="$(echo $2/bin/wrapper)"
            
            if [ "$container_username" != "" ]
            then
                runProcess="su $container_username -c \"$runProcess\""
            fi
            
            # init.d activation
            sed -e "s|@name@|disnix-$serviceName|" \
                -e "s|@description@|$serviceName|" \
                -e "s|@process@|$runProcess|" \
                @datadir@/@PACKAGE@/wrapper.template.initd > @sysvinit_initd_dir@/$serviceName
                
                @sysvinit_initd_dir@/$serviceName start || (removeUnprivilegedUserAndGroup; false)
        else
            # Direct activation
            
            if [ "$container_username" = "" ]
            then
                $2/bin/wrapper activate
            else
                su $container_username -c "$2/bin/wrapper activate" || (removeUnprivilegedUserAndGroup; false)
            fi
        fi
        
        markComponentAsActive
        ;;
    
    deactivate)
        if [ "@job_template@" = "systemd" ]
        then
            # Systemd deactivation
            if [ -e @systemd_rundir@/system/disnix-$serviceName.socket ]
            then
                systemctl stop disnix-$serviceName.socket
            fi
            
            if [ -e @systemd_rundir@/system/disnix-$serviceName.service ]
            then
                systemctl stop disnix-$serviceName.service
            fi
        elif [ "@job_template@" = "init.d" ]
        then
            # init.d deactivation
            
            if [ -e @sysvinit_initd_dir@/$serviceName ]
            then
                @sysvinit_initd_dir@/$serviceName stop
            fi
        else
            # Direct deactivation
            
            if [ "$container_username" = "" ]
            then
                $2/bin/wrapper deactivate
            else
                su $container_username -c "$2/bin/wrapper deactivate"
            fi
        fi
        
        attemptSeveralTimes removeUnprivilegedUserAndGroup 10
        
        if [ "@job_template@" = "systemd" ]
        then
            # systemd cleanup
            if [ -e @systemd_rundir@/system/disnix-$serviceName.service ]
            then
                removeSystemdService @systemd_rundir@/system/disnix-$serviceName.service $2
            fi
        elif [ "@job_template@" = "init.d" ]
        then
            # init.d cleanup
            rm @sysvinit_initd_dir@/$serviceName
        fi
        
        unmarkComponentAsActive
        ;;
    
    lock)
        if [ "$container_username" = "" ]
        then
            $2/bin/wrapper lock
        else
            su $container_username -c "$2/bin/wrapper lock"
        fi
        ;;
    
    unlock)
        if [ "$container_username" = "" ]
        then
            $2/bin/wrapper unlock
        else
            su $container_username -c "$2/bin/wrapper unlock"
        fi
        ;;
    snapshot)
        $2/bin/wrapper snapshot
        ;;
    restore)
        $2/bin/wrapper restore
        ;;
    collect-garbage)
        $2/bin/wrapper collect-garbage
        ;;
esac
