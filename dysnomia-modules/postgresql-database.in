#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

determineComponentName $2
checkStateDir
determineTypeIdentifier $0
determineContainerName $3
composeSnapshotsPath
composeGarbagePath
composeGenerationsPath

case "$1" in
    activate)
        # Initalize the given schema if the database does not exists
        if [ "$(@psql@ -l | grep -x $componentName)" = "" ]
        then
            @createdb@ -O $postgresqlUsername $componentName
            
            if [ -d $2/postgresql-databases ]
            then
                su $postgresqlUsername -c "psql --file $2/postgresql-databases/*.sql $componentName"
            fi
        fi
        unmarkStateAsGarbage
        ;;
    deactivate)
        markStateAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        cd $tmpdir
        
        @pg_dump@ $componentName | xz > dump.pgsql.xz
        
        hash=$(cat dump.pgsql.xz | sha256sum)
        hash=${hash:0:64}
        
        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv dump.pgsql.xz $snapshotsPath/$hash
            rmdir $tmpdir
            
        fi
        createGenerationSymlink $snapshotsPath/$hash
        ;;
    restore)
        determineLastSnapshot
        
        if [ "$lastSnapshot" != "" ]
        then
            dropdb $componentName
            @createdb@ -O $postgresqlUsername $componentName
            su $postgresqlUsername -c "xzcat $snapshotsPath/$lastSnapshot/dump.pgsql.xz | psql --file - $componentName"
        fi
        ;;
    collect-garbage)
        if [ -f $garbagePath ]
        then
            dropdb $componentName
            unmarkStateAsGarbage
        fi
        ;;
esac
