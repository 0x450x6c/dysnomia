#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Manages the deployment lifecycle of an ejabberd database.
#
# On activation, an initial dump can be restored. If the mutable component is a
# directory, then the dump file stored inside the ejabberd-dump/ subfolder gets
# imported. If the mutable component is a file, then it is considered to be the
# initial dump.
#
# This module also support snapshotting. It uses the output hash of the dump to
# uniquely identify each snapshot.
#
# ejabberdUser: Username of the account that has the privileges to administer
#    the ejabberd node

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

determineComponentName $2
checkStateDir
determineTypeIdentifier $0
determineContainerName $3
composeSnapshotsPath
composeGarbagePath
composeGenerationsPath

ejabberdctl=@ejabberdctl@

case "$1" in
    activate)
        # Wait until the ejabberd daemon is available
        count=0
        while ! su $ejabberdUser -s /bin/sh -c "$ejabberdctl status"
        do
            if [ $count -eq 30 ]
            then
                echo "Tried 30 times, giving up..."
                exit 1
            fi
            
            echo "Ejabberd daemon not yet started. Waiting for 1 second..."
            count=$((count++))
            sleep 1
        done
        
        # Load the dump
        if [ -f $2 ]
        then
            su $ejabberdUser -s /bin/sh -c "$ejabberdctl load $2"
        elif [ -d $2 ]
        then
            su $ejabberdUser -s /bin/sh -c "$ejabberdctl load $2/ejabberd-dump/*"
        fi
        
        markComponentAsActive
        ;;
    deactivate)
        markComponentAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        chown $ejabberdUser $tmpdir
        cd $tmpdir
        
        su $ejabberdUser -s /bin/sh -c "$ejabberdctl dump $tmpdir/dump"
        
        hash=$(cat dump | sha256sum)
        hash=${hash:0:64}
        
        snapshotsPath=$(composeSnapshotsPath)
        
        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            chown $(whoami) dump
            mv dump $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $hash
        ;;
    restore)
        lastSnapshot=$(determineLastSnapshot)
        
        if [ "$lastSnapshot" != "" ]
        then
            su $ejabberdUser -s /bin/sh -c "$ejabberdctl load $lastSnapshot/dump"
        fi
        ;;
    collect-garbage)
        if componentMarkedAsGarbage
        then
            rm -Rf /var/lib/ejabberd
            rm -Rf /var/ejabberd
            rm -Rf /var/log/ejabberd
            
            unmarkComponentAsGarbage
        fi
        ;;
esac
