#!/bin/bash -e
# Copyright (c) 2009-2015 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 [options] operation"
    echo "Operations:"
    echo
    echo "--query-latest    Queries the relative paths to the latest snapshots of a collection of components"
    echo "--query-all       Queries the relative paths of all snapshots of a collection of components"
    echo "--print-missing   Prints all the paths that do not exist in the snapshots folder"
    echo "--gc              Removes all older snapshots of all components"
    echo "--import          Moves a snapshot into the snapshots folder"
    echo "--resolve         Translates the relative snapshot paths into absolute snapshot paths"
    echo
    echo "Options:"
    echo
    echo "-c,--component    Name of (or path to) a component containing the logical state of a mutable component"
    echo "-C,--container    Name of (or path to) a configuration describing the container in which the mutable component should be hosted"
    echo "--keep            Number of snapshot generations to keep while running the garbage collector"
    echo "-h,--help         Shows the usage of this command"
}

checkStateDir

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o C:c:h -l print-missing,query-latest,query-all,gc,import,resolve,container:,component:,keep:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        --query-latest)
            operation="query-latest"
            ;;
        --query-all)
            operation="query-all"
            ;;
        --print-missing)
            operation="print-missing"
            ;;
        --gc)
            operation="gc"
            ;;
        --import)
            operation="import"
            ;;
        --resolve)
            operation="resolve"
            ;;
        -C|--container)
            container=$2
            ;;
        -c|--component)
            component=$2
            ;;
        --keep)
            keep=$2
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
    esac
    
    shift
done

shift

# Validate options

if [ -z "$operation" ]
then
    echo "No operation specified!" >&2
    exit 1
fi

if [ -z "$keep" ]
then
    keep=1
fi

# Execute operation

determineComponentName $component

case "$operation" in
    query-latest)
        if [ -d $DYSNOMIA_STATEDIR/generations ]
        then
            if [ -z "$container" ]
            then
                containers=$(ls $DYSNOMIA_STATEDIR/generations)
            else
                containers=$container
            fi
            
            for container in $containers
            do
                if [ -z "$componentName" ]
                then
                    if [ -d $DYSNOMIA_STATEDIR/generations/$container ]
                    then
                        components=$(ls $DYSNOMIA_STATEDIR/generations/$container)
                    else
                        components=""
                    fi
                else
                    components=$componentName
                fi
                
                for component in $components
                do
                    if [ -d $DYSNOMIA_STATEDIR/generations/$container/$component ]
                    then
                        lastGeneration=$(ls $DYSNOMIA_STATEDIR/generations/$container/$component | sort -n | tail -1)
                    
                        if [ "$lastGeneration" != "" ]
                        then
                            lastSnapshot=$(readlink -f $DYSNOMIA_STATEDIR/generations/$container/$component/$lastGeneration)
                            echo $container/$component/$(basename $lastSnapshot)
                        fi
                    fi
                done
            done
        fi
        ;;
    query-all)
        if [ -d $DYSNOMIA_STATEDIR/snapshots ]
        then
            if [ -z "$container" ]
            then
                containers=$(ls $DYSNOMIA_STATEDIR/snapshots)
            else
                containers=$container
            fi
            
            for container in $containers
            do
                if [ -z "$componentName" ]
                then
                    if [ -d $DYSNOMIA_STATEDIR/snapshots/$container ]
                    then
                        components=$(ls $DYSNOMIA_STATEDIR/snapshots/$container)
                    else
                        components=""
                    fi
                else
                    components=$componentName
                fi
                
                for component in $components
                do
                    if [ -d $DYSNOMIA_STATEDIR/snapshots/$container/$component ]
                    then
                        for snapshot in $(ls $DYSNOMIA_STATEDIR/snapshots/$container/$component)
                        do
                            echo $container/$component/$snapshot
                        done
                    fi
                done
            done
        fi
        ;;
    print-missing)
        if [[ ! -z "$@" ]]
        then
            for i in $@
            do
                if [ ! -e $DYSNOMIA_STATEDIR/snapshots/$i ]
                then
                    echo $i
                fi
            done
        fi
        ;;
    gc)
        # Remove dangling symlinks
        if [ -d $DYSNOMIA_STATEDIR/generations ]
        then
            for i in $DYSNOMIA_STATEDIR/generations/*
            do
                if [ ! -e "$i" ]
                then
                     echo "Remove dangling generation symlink: $DYSNOMIA_STATEDIR/generations/$i" >&2
                     rm $DYSNOMIA_STATEDIR/generations/$i
                fi
            done
        fi
        
        # Remove snapshots
        if [ -d $DYSNOMIA_STATEDIR/generations ]
        then
            for container in $(ls $DYSNOMIA_STATEDIR/generations)
            do
                for component in $(ls $DYSNOMIA_STATEDIR/generations/$container)
                do
                    count=$(ls $DYSNOMIA_STATEDIR/generations/$container/$component | wc -l)
                    
                    if [ $count -gt $keep ]
                    then
                        for i in $(ls $DYSNOMIA_STATEDIR/generations/$container/$component | sort -n | head -n -$keep)
                        do
                            snapshot=$(readlink -f $DYSNOMIA_STATEDIR/generations/$container/$component/$i)
                            echo "Removing old snapshot: $snapshot" >&2
                            rm -Rf $snapshot
                            
                            echo "Removing old generation: $container/$component/$i" >&2
                            rm $DYSNOMIA_STATEDIR/generations/$container/$component/$i
                        done
                    fi
                done
            done
        fi
        ;;
    import)
        if [ -z "$container" ]
        then
            echo "ERROR: No container specified!" >&2
            exit 1
        fi
        
        if [ -z "$componentName" ]
        then
            echo "ERROR: No component specified!" >&2
            exit 1
        fi
        
        if [[ ! -z "$@" ]]
        then
            mkdir -p $DYSNOMIA_STATEDIR/snapshots/$container/$componentName
            
            for i in $@
            do
                mv $i $DYSNOMIA_STATEDIR/snapshots/$container/$componentName
            done
            
            generationsPath=$DYSNOMIA_STATEDIR/generations/$container/$componentName
            createGenerationSymlink $DYSNOMIA_STATEDIR/snapshots/$container/$componentName/$(basename $i)
        fi
        ;;
    resolve)
        if [[ ! -z "$@" ]]
        then
            for i in $@
            do
                echo $DYSNOMIA_STATEDIR/snapshots/$i
            done
        fi
        ;;
esac
