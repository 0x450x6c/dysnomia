#!/bin/bash -e
# Copyright (c) 2009-2015 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 --operation operation --component component {--container container | --environment}"
    echo "Options:"
    echo
    echo "-o,--operation    Specifies the operation to execute on the mutable component, such as activate or deactivate"
    echo "-c,--component    Name of (or path to) a component containing the logical state of a mutable component"
    echo "-C,--container    Name of (or path to) a configuration describing the container in which the mutable component should be hosted"
    echo "-E,--environment  Takes the container settings from the current environment. Be careful with this!"
    echo "-t,--type         Specifies Dysnomia to use the specified Dysnomia module type if none is given. Required to be used in combination with --environment"
    echo "-h,--help         Shows the usage of this command"
}

# Autoconf settings

export prefix=@prefix@
export exec_prefix=@exec_prefix@

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o o:c:C:Et:h -l operation:,component:,container:,environment,type:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -o|--operation)
            operation="$2"
            ;;
        
        -c|--component)
            component="$(readlink -f "$2")"
            ;;
        
        -C|--container)
            container="$2"
            ;;
        
        -E|--environment)
            useEnvironment=1
            ;;
        
        -t|--type)
            type="$2"
            ;;
        
        -h|--help)
            showUsage
            exit 0
            ;;
    esac
    
    shift
done

# Validate options

if [ -z "$operation" ]
then
    echo "No operation specified!" >&2
    exit 1
fi

if [ ! -e "$component" ]
then
    echo "No component is specified or it does not exists!" >&2
    exit 1
fi

if [ -n "$container" ] 
then
    # Determine the container configuration

    if [ "${container:0:1}" = "/" ] || [ "${container:0:2}" = "./" ]
    then
        # File references to containers can be used directly
        containerConfig="$(readlink -f $container)"
    else

        # For ordinary strings, search for the container configuration in DYSNOMIA_CONTAINERS_PATH
        DYSNOMIA_CONTAINERS_PATHS=$(echo $DYSNOMIA_CONTAINERS_PATH | tr ':' ' ')

        for i in $DYSNOMIA_CONTAINERS_PATHS
        do
            if [ -f "$i" ]
            then
                containerConfig=$i
                break
            fi
        done

        if [ ! -f "$containerConfig" ]
        then
            echo "No container configuration found for: $container" >&2
            exit 1
        fi
    fi

    # Extract the container type from the configuration

    eval $(grep "^type=" $containerConfig)

    if [ -z "$type" ]
    then
        echo "ERROR: No type specified in the container configuration!" >&2
        exit 1
    fi
    
    containerEnv="$(cat $containerConfig)"
    envFlags="-i"
    
elif [ "$useEnvironment" = "1" ]
then
    containerEnv=""
    envFlags=""
else
    echo "No container file or environment specified!" >&2
    exit 1
fi

# Search for Dysnomia modules in the DYSNOMIA_MODULES_PATH and the libexecdir

DYSNOMIA_MODULES_PATHS=$(echo $DYSNOMIA_MODULES_PATH | tr ':' ' ')

for i in $DYSNOMIA_MODULES_PATHS @libexecdir@
do
    if [ -x "$i/$type" ]
    then
        module=$i/$type
        break
    fi
done

if [ -z $module ]
then
    echo "Module: $type cannot be found!" >&2
    exit 1
fi

# Forward the requested operation to the Dysnomia module

env $envFlags PATH=$PATH DYSNOMIA_STATEDIR=$DYSNOMIA_STATEDIR \
  $containerEnv \
  $module $operation $component
